import asyncio
import json
import logging
import os
import random
import sys
import time

from aiogram import Bot, Dispatcher, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from decouple import config

API_TOKEN = config('API_TOKEN')
CHANNEL = config('CHANNEL')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

keys_file = config('KEYS_FILENAME')
admins = config('ADMINS').split(',')


def get_keys():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open(keys_file, 'r') as file:
            keys = file.read().splitlines()
    except FileNotFoundError:
        logging.warning('Keys file not found')
        keys = []
    return keys


def get_users():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open('users.json', 'r') as file:
            user_data = json.load(file)
    except FileNotFoundError:
        logging.warning('Users file not found')
        user_data = {}
    return user_data


def get_keyboard():
    bthurl = InlineKeyboardButton(text="–ö–∞–Ω–∞–ª", url=f'https://t.me/{CHANNEL[1:]}')
    bthsub = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subchennel")

    checksubmenu = InlineKeyboardMarkup(inline_keyboard=[[bthurl, bthsub]], resize_keyboard=True)
    return checksubmenu


def save_user_data(user_data):
    print(user_data)
    with open('users.json', 'w') as file:
        json.dump(user_data, file)


def save_keys(keys):
    with open(keys_file, 'w') as file:
        file.write('\n'.join(keys))


@dp.callback_query(F.data == 'subchennel')
@dp.message(CommandStart())
async def check_subscribe(message: types.Message):
    users = get_users()
    if str(message.from_user.id) not in users:
        await bot.send_message(message.from_user.id,
                               '''
üëã –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞—Ä–∏–Ω–∞! –Ø –†–æ–±–æ–ì–∞–±–µ–Ω, —â–µ–¥—Ä—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–∞–µ—Ç –∫–ª—é—á–∏ –æ—Ç –∏–≥—Ä Steam —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏. 

‚ñ´Ô∏è–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –•–∞–ª—è–≤–Ω—ã–π Steam (http://t.me/SteamByFree) üéÆ

‚ñ´Ô∏è–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: C—ã–Ω –ì–∞–±–µ–Ω–∞  (http://t.me/gabenson)
‚ñ´Ô∏è–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @sh33shka                               
                               ''')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    current_time = time.time()
    try:
        chat_member = await bot.get_chat_member(chat_id=CHANNEL, user_id=message.from_user.id)
    except TelegramBadRequest:
        logging.error("–ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ!")
        await bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        return

    if chat_member.status not in ['member', 'administrator', 'creator']:
        await bot.send_message(message.from_user.id,
                               '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!',
                               reply_markup=get_keyboard())
        return
    else:
        await bot.send_message(message.from_user.id, '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
    if str(message.from_user.id) in users:
        if current_time - users[str(message.from_user.id)][
            'last_key_time'] < 1209600:  # 2 –Ω–µ–¥–µ–ª–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            await bot.send_message(message.from_user.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏.')
            return
    current_time = time.time()

    keys = get_keys()

    # –í—ã–¥–∞—á–∞ –∫–ª—é—á–∞
    if keys:
        key = random.choice(keys)
        keys.remove(key)
        save_keys(keys)
        users[str(message.from_user.id)] = {'last_key_time': current_time}
        save_user_data(users)
        await bot.send_message(message.from_user.id, f'–í–∞—à –∫–ª—é—á: {key}')
    else:
        await bot.send_message(message.from_user.id, '–ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.')


@dp.message(F.document)
async def handle_docs(message: types.Message):
    if str(message.from_user.id) in admins:
        document = message.document
        if document.file_name == keys_file:
            file_info = await bot.get_file(document.file_id)
            file_path = file_info.file_path
            await bot.download_file(file_path, 'new_keys.txt')

            with open('new_keys.txt', 'r') as file:
                new_keys = file.read().splitlines()

            keys = get_keys()
            for nkew in new_keys:
                if nkew not in keys:
                    keys.append(nkew)

            with open(keys_file, 'w') as file:
                file.write('\n'.join(keys))

            os.remove('new_keys.txt')
            await message.reply('–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
        else:
            await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º keys.txt.')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
