import json
import os
import random
import sys
import time
import traceback

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.deep_linking import create_start_link
from aiogram.utils.payload import decode_payload
from decouple import config
import asyncio
import logging
from aiogram.filters import CommandObject, Command
from aiogram.exceptions import TelegramAPIError
from aiogram.exceptions import TelegramBadRequest
from aiogram import types
import redis.asyncio as redis

ALERT_DELAY = 3  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
REPORT_EVERY = 25000  # –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É

API_TOKEN = config('API_TOKEN')
CHANNELS = config('CHANNELS').split(',')

# Redis –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

keys_file = config('KEYS_FILENAME')
admins = config('ADMINS').split(',')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
redis_client = None


async def init_redis():
    global redis_client
    try:
        redis_client = await redis.from_url(REDIS_URL, decode_responses=True)
        await redis_client.ping()
        logging.info("Redis connected successfully")
    except Exception as e:
        logging.error(f"Redis connection failed: {e}")
        redis_client = None


class Throttled(Exception):
    pass


class CancelHandler(Exception):
    pass


class ThrottlingMiddleware:
    def __init__(self, rate_limit: float = 1.0, key_prefix: str = 'antiflood_'):
        self.rate_limit = rate_limit
        self.prefix = key_prefix

    async def __call__(self, handler, event: types.Message, data: dict):
        if not redis_client:
            return await handler(event, data)

        user_id = event.from_user.id
        key = f"{self.prefix}_{user_id}"

        try:
            await self.check_rate_limit(key)
        except Throttled:
            await event.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return

        return await handler(event, data)

    async def check_rate_limit(self, key: str):
        if not redis_client:
            return

        now = time.time()
        data = await redis_client.hgetall(key)

        if data:
            last_call = float(data.get('last_call', 0))
            exceeded_count = int(data.get('exceeded_count', 0))
            delta = now - last_call

            if delta < self.rate_limit:
                exceeded_count += 1
                await redis_client.hset(key, mapping={
                    'last_call': now,
                    'exceeded_count': exceeded_count,
                    'delta': delta
                })
                raise Throttled()

        await redis_client.hset(key, mapping={
            'last_call': now,
            'exceeded_count': 0,
            'delta': 0
        })
        await redis_client.expire(key, 3600)  # –£–¥–∞–ª—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ —á–∞—Å


# –ê–Ω—Ç–∏—Å–ø–∞–º middleware –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
class CallbackThrottlingMiddleware:
    def __init__(self, rate_limit: float = 1.0):
        self.rate_limit = rate_limit

    async def __call__(self, handler, event: types.CallbackQuery, data: dict):
        if not redis_client:
            return await handler(event, data)

        user_id = event.from_user.id
        key = f"callback_antiflood_{user_id}"

        try:
            await self.check_rate_limit(key)
        except Throttled:
            await event.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª–∏–∫–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É.", show_alert=True)
            return

        return await handler(event, data)

    async def check_rate_limit(self, key: str):
        if not redis_client:
            return

        now = time.time()
        last_call = await redis_client.get(key)

        if last_call:
            delta = now - float(last_call)
            if delta < self.rate_limit:
                raise Throttled()

        await redis_client.setex(key, int(self.rate_limit * 2), str(now))


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
message_throttle = ThrottlingMiddleware(rate_limit=2.0)  # 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
callback_throttle = CallbackThrottlingMiddleware(rate_limit=1.0)  # 1 –∫–æ–ª–±—ç–∫ –≤ —Å–µ–∫—É–Ω–¥—É

dp.message.middleware(message_throttle)
dp.callback_query.middleware(callback_throttle)


def get_keys():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open(keys_file, 'r') as file:
            keys = file.read().splitlines()
    except FileNotFoundError:
        logging.warning('Keys file not found')
        keys = []
    return keys


def get_users():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open('users.json', 'r') as file:
            user_data = json.load(file)
    except FileNotFoundError:
        logging.warning('Users file not found')
        user_data = {}
    return user_data


def get_keyboard(only_ref=False):
    if only_ref:
        bthref = KeyboardButton(text="–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
        return ReplyKeyboardMarkup(keyboard=[[bthref]], resize_keyboard=True)
    kbrd = [[
        *[InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª {ind}", url=f'https://t.me/{channel[1:]}') for ind, channel in
          enumerate(CHANNELS, start=1)],
        InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subchennel")
    ]]

    return InlineKeyboardMarkup(inline_keyboard=kbrd, resize_keyboard=True)


def save_user_data(user_data):
    with open('users.json', 'w') as file:
        json.dump(user_data, file)


def save_keys(keys):
    with open(keys_file, 'w') as file:
        file.write('\n'.join(keys))


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
@dp.message(F.text.startswith("–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"))
async def get_ref(message: types.Message):
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if redis_client:
        user_id = message.from_user.id
        key = f"ref_link_{user_id}"
        last_request = await redis_client.get(key)

        if last_request:
            delta = time.time() - float(last_request)
            if delta < 30:  # –ù–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
                await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥.")
                return

        await redis_client.setex(key, 30, str(time.time()))

    link = await create_start_link(bot, str(message.from_user.id), encode=True)
    await bot.send_message(message.from_user.id, f"–í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞ {link}")


async def send_key(user_id, from_ref=False):
    keys = get_keys()
    lkeys = len(keys)
    if lkeys <= int(config('KEYS_LEN_ALERT')):
        for admin in admins:
            try:
                await bot.send_message(int(admin), f'–í–Ω–∏–º–∞–Ω–∏–µ, –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∫–ª—é—á–µ–π: {lkeys}')
            except TelegramBadRequest:
                logging.warning('Telegram Bad Request')
    if keys:
        key = random.choice(keys)
        keys.remove(key)
        save_keys(keys)
        if from_ref:
            await bot.send_message(user_id, f'–£—Ä–∞, –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–ª–∏, –¥–µ—Ä–∂–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ')
        await bot.send_message(user_id, f'–í–∞—à –∫–ª—é—á: {key}')
        return True
    else:
        await bot.send_message(user_id, '–ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.')
        return False


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
active_processes = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã


@dp.callback_query(F.data == 'subchennel')
@dp.message(CommandStart())
async def check_subscribe(message: types.Message, command: CommandObject = None):
    user_id = str(message.from_user.id)
    current_time = time.time()
    users = get_users()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if user_id in active_processes:
        await bot.send_message(message.from_user.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
    active_processes.add(user_id)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if user_id not in users:
            await bot.send_message(message.from_user.id,
                                   '''
üôè –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞—Ä–∏–Ω–∞! –Ø –†–æ–±–æ–ì–∞–±–µ–Ω, —â–µ–¥—Ä—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–∞–µ—Ç –∫–ª—é—á–∏ –æ—Ç –∏–≥—Ä Steam —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏. 

‚ñ´Ô∏è–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ [–º–µ–Ω—è](https://t.me/gabenson) –∏ –Ω–∞ [–•–∞–ª—è–≤–Ω—ã–π Steam](https://t.me/SteamByFree)

‚ñ´Ô∏è–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: [C—ã–Ω –ì–∞–±–µ–Ω–∞](http://t.me/gabenson)
‚ñ´Ô∏è–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @sh33shka                           
                                   ''', parse_mode="MARKDOWN")
            referal = ""
            if command and command.args:
                reference = str(decode_payload(command.args))
                if reference != user_id:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è
                    referal = reference

            users[user_id] = {'referal': referal}
            save_user_data(users)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        all_in = True
        for channel in CHANNELS:

            try:
                chat_member = await bot.get_chat_member(chat_id=channel, user_id=message.from_user.id)
                if chat_member.status not in ['member', 'administrator', 'creator']:
                    all_in = False
                    break
            except TelegramBadRequest:
                traceback.print_exc()
                all_in = False
                break

        if not all_in:
            await bot.send_message(message.from_user.id,
                                   '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!',
                                   reply_markup=get_keyboard())
            return

        await bot.send_message(message.from_user.id, '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã!',
                               reply_markup=get_keyboard(only_ref=True))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        referal = users[user_id].get('referal', "")
        if referal and referal.isdigit():
            if 'last_ref_time' not in users[referal] or current_time - users[referal]['last_ref_time'] >= 1:
                await send_key(int(referal), from_ref=True)
                users[user_id]['referal'] = ""
                users[referal]['last_ref_time'] = current_time
                save_user_data(users)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
        if 'last_key_time' in users[user_id] and current_time - users[user_id]['last_key_time'] < 1209600:
            # if 'last_key_time' in users[user_id]:
            await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á.')
            return

        # –í—ã–¥–∞—á–∞ –∫–ª—é—á–∞
        if await send_key(message.from_user.id):
            users[user_id]['last_key_time'] = current_time
            save_user_data(users)

    finally:
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        active_processes.discard(user_id)


@dp.message(F.document)
async def handle_docs(message: types.Message):
    if str(message.from_user.id) in admins:
        document = message.document
        if document.file_name == keys_file:
            file_info = await bot.get_file(document.file_id)
            file_path = file_info.file_path
            await bot.download_file(file_path, 'new_keys.txt')

            with open('new_keys.txt', 'r') as file:
                new_keys = file.read().splitlines()

            keys = get_keys()
            for nkew in new_keys:
                if nkew not in keys:
                    keys.append(nkew)

            with open(keys_file, 'w') as file:
                file.write('\n'.join(keys))

            os.remove('new_keys.txt')
            await message.reply('–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
        else:
            await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º keys.txt.')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')


@dp.message(Command(commands=['alert']))
async def cmd_alert(message: types.Message, command: CommandObject):
    user_id = str(message.from_user.id)
    if user_id not in admins:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    if not command.args:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /alert <—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏>")

    text = command.args
    await message.reply("üì® –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –û–Ω–∞ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 4 –¥–Ω–µ–π.")
    await asyncio.create_task(alert_background(text, message.from_user.id))


async def alert_background(text: str, admin_id: int):
    users = get_users()
    total = len(users)
    sent = 0
    failed = 0

    for idx, (uid, _) in enumerate(users.items(), start=1):
        try:
            await bot.send_message(chat_id=int(uid), text=text)
            sent += 1
        except TelegramBadRequest as e:
            logging.warning(f"BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {uid}: {e}")
            failed += 1
        except TelegramAPIError as e:
            if "Too Many Requests" in str(e):
                logging.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç. –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(5)
                try:
                    await bot.send_message(chat_id=int(uid), text=text)
                    sent += 1
                except Exception as ex:
                    failed += 1
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ {uid}: {ex}")
            else:
                failed += 1
                logging.error(f"API –æ—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {uid}: {e}")
            failed += 1

        if idx % REPORT_EVERY == 0:
            await bot.send_message(
                chat_id=admin_id,
                text=f"üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç: {sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {failed} –æ—à–∏–±–æ–∫ –∏–∑ {idx} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö.",
            )

        await asyncio.sleep(ALERT_DELAY)

    await bot.send_message(
        chat_id=admin_id,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {failed} –æ—à–∏–±–æ–∫, –∏–∑ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    )


async def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
    await init_redis()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())